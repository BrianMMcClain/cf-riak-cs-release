#!/bin/bash

set -x # Print commands and their arguments as they are executed.
set -e # exit immediately if a simple command exits with a non-zero status

# Control script to start/stop ruby/rack riak job on a BOSH controlled VM
#
# This script can be run manually. Examples below assume you are in the root of this release project.
#
# Start process example:
# APP_DIR=/path/to/riak RACK_ENV=development COMMAND=shotgun PORT=9393 jobs/riak-cs/templates/riak_ctl start
#
# View STDOUT/STDERR logs:
# jobs/riak-cs/templates/riak_ctl logs
#
# Clear logs:
# jobs/riak-cs/templates/riak_ctl clearlogs

# TODO - change "EXECUTABLE_SERVER" to the command to run

JOB_DIR=/var/vcap/jobs/riak-cs
RUN_DIR=/var/vcap/sys/run/riak
LOG_DIR=/var/vcap/sys/log/riak
STORE=/var/vcap/store/riak
PIDFILE=$RUN_DIR/riak.pid

export PATH=/var/vcap/packages/ruby/bin:$PATH
export HOME=/var/vcap

case $1 in

  start)

    set +e

    echo 0 >> /proc/sys/vm/swappiness
    echo 8388608 >> /proc/sys/net/core/wmem_default
    echo 8388608 >> /proc/sys/net/core/rmem_default
    echo 8388608 >> /proc/sys/net/core/wmem_max
    echo 8388608 >> /proc/sys/net/core/rmem_max
    echo 10000 >> /proc/sys/net/core/netdev_max_backlog
    echo 4000 >> /proc/sys/net/core/somaxconn
    echo 40000 >> /proc/sys/net/ipv4/tcp_max_syn_backlog
    echo 15 >> /proc/sys/net/ipv4/tcp_fin_timeout
    echo 1 >> /proc/sys/net/ipv4/tcp_tw_reuse

    set -e

    mkdir -p $RUN_DIR
    mkdir -p $LOG_DIR
    mkdir -p $STORE

    # Put the config files in place
    cp $JOB_DIR/config/riak.app.config /var/vcap/packages/riak/rel/etc/app.config

    # Set the max open file limit
    ulimit -n 65536

    # Update vm.args with current IP address
    IP_ADDR=`ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $1}' | tail -1`
    sed -i "s/127.0.0.1/$IP_ADDR/" /var/vcap/packages/riak/rel/etc/vm.args
    sed -i "s/127.0.0.1/$IP_ADDR/" /var/vcap/packages/riak/rel/etc/app.config

    <% if properties.riak.firewall_enabled %>
      bash $JOB_DIR/restrict_riak_requests_to_cluster_ip_range.sh
    <% end %>

    # Start riak
    /var/vcap/packages/riak/rel/bin/riak start

    # find the PID of the riak process
    pgrep -f 'beam.*riak' | xargs ps hp | grep 'progname riak ' | awk '{print $1}' > $PIDFILE

    # Join the cluster if we aren't the seed node
    if [ "$IP_ADDR" != "<%= properties.riak.seed_node %>" ]
    then
      bash $JOB_DIR/join_cluster.sh
    fi

    # Create admin user for service broker if we are the seed node
    if [ "$IP_ADDR" == "<%= properties.riak.seed_node %>" ]
    then
      # wait for riak_kv to be available before creating an admin user
      /var/vcap/packages/riak/rel/bin/riak-admin wait-for-service riak_kv riak@$IP_ADDR

      /var/vcap/packages/erlang/bin/escript $JOB_DIR/bin/create_cs_user.escript \
        admin \
        <%= properties.riak_cs.admin_key %> \
        <%= properties.riak_cs.admin_secret %> \
        1391105120 &>> $LOG_DIR/create_user.log

      /var/vcap/jobs/riak-cs/bin/seed_buckets.sh
    fi
    ;;

  stop)
    /var/vcap/packages/riak/rel/bin/riak stop
    rm -f $PIDFILE
    ;;

  logs)
    cat $LOG_DIR/*
    ;;

  tail)
    tail -f $LOG_DIR/*
    ;;

  clearlogs)
    rm $LOG_DIR/*
    ;;

  *)
    echo "Usage: riak_ctl {start|stop|logs|tail|clearlogs}" ;;
esac
exit 0
